/*******************************************************************************
 * Copyright (c) 2011 GigaSpaces Technologies Ltd. All rights reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
package org.cloudifysource.esc.esm;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.cloudifysource.dsl.cloud.Cloud;


/**
 * This class is in-charge of transferring all provisioning information from the Cloud POJO to
 * the CloudMachineProvisioningConfig Class.
 * 
 * The information in the Cloud class is being loaded from the .groovy DSL file.
 * 
 * @author adaml
 * @deprecated
 *
 */
public class CloudDSLToCloudMachineProvisioningConfig {

	private static Logger logger = Logger.getLogger(CloudDSLToCloudMachineProvisioningConfig.class.getName());
	
	/**
	 * convert a cloud POJO to CloudMachineProvisioningConfig.
	 * 
	 * @param cloud - a cloud POJO generated by a DSL file
	 * @param properties - CloudMachineProvisioningConfig properties.
	 * @return converted CloudMachineProvisioningConfig Object.
	 */
	public static CloudMachineProvisioningConfig convert(Cloud cloud){
		
		Class<? extends Cloud> aCloudClass = cloud.getClass();
		List<Method> ClassGetters = getValidGetters(aCloudClass);
		//TODO: get rid of esc dependency by instantiating the class using reflection.
//		String className = "org.cloudifysource.esc.esm.CloudMachineProvisioningConfig";
//		Class<?> beanClass = Class.forName(className);
//		Class<?> cloudMachineProvisioning = (Class<?>) beanClass.newInstance();
		CloudMachineProvisioningConfig cloudMachineProvisioning = new CloudMachineProvisioningConfig();
		Class<?> aMachimeProvisioningClass = cloudMachineProvisioning.getClass();
		List<Method> classSetters = getValidSetters(aMachimeProvisioningClass);
		
		for (Method method : ClassGetters) {
			Object result = safeInvoke(method, cloud, (Object[])null);
			if (result != null) {
				Method setterMethod = getAppropriateSetterMethod(method, classSetters);
				if (setterMethod != null){
					safeInvoke(setterMethod, cloudMachineProvisioning, result);
				}
			}
		}
		return cloudMachineProvisioning;
		
	}

	private static Method getAppropriateSetterMethod(Method method,
			List<Method> classSetters) {
		//remove the "get" prefix from getter method.
		String getterMethodSuffix = method.getName().substring(2);
		for (Method cloudMachineProvisioningMethod : classSetters) {
			if (cloudMachineProvisioningMethod.getName().endsWith(getterMethodSuffix)){
				if (cloudMachineProvisioningMethod.getParameterTypes()[0].equals(method.getReturnType())){
					return cloudMachineProvisioningMethod;
				}else{
					throw new IllegalStateException("setter method " + cloudMachineProvisioningMethod.getName() 
							+ " parameter type does not match the getter method's return type for getter " + method.getName());
				}
			}
		}
		return null;
	}

	private static Object safeInvoke(Method method, Object object, Object... args) {
		try {
			
			Object result = method.invoke(object, args);
			return result;
		} catch (IllegalArgumentException e) {
			logger.log(Level.WARNING, "Cloud Machine Provisioning Config was unable to set "
					+ method.getName().substring(2) + ". Using default value");
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			logger.log(Level.WARNING, "Cloud Machine Provisioning Config was unable to set "
					+ method.getName().substring(2) + ". Using default value");
		} catch (InvocationTargetException e) {
			logger.log(Level.WARNING, "Cloud Machine Provisioning Config was unable to set "
					+ method.getName().substring(2) + ". Using default value");
			e.printStackTrace();
		}
		return null;
	}

	private static List<Method> getValidSetters(Class<?> cloudMachineProvisioningConfigClass) {
		Method[] allMethods = cloudMachineProvisioningConfigClass.getMethods();
		List<Method> validSetterMethods = new ArrayList<Method>();

		for (Method method : allMethods){
			if (isValidObjectSetter(method)){
				validSetterMethods.add(method);
			}
		}
		return validSetterMethods;
	}

	//return a list of valid getters.
	private static List<Method> getValidGetters(Class<? extends Cloud> cloudClass) {
		Method[] allMethods = cloudClass.getMethods();
		List<Method> validGetterMethods = new ArrayList<Method>();

		for (Method method : allMethods){
			if (isValidObjectGetter(method)){
				validGetterMethods.add(method);
			}
		}
		return validGetterMethods;
	}
	
	public static boolean isValidObjectGetter(Method method) {
		String methodName = method.getName();
		return ((methodName.startsWith("get") || methodName.startsWith("is") ) &&
				method.getParameterTypes().length == 0 && !methodName.equals("getClass"));	}
	
	public static boolean isValidObjectSetter(Method method) {
		return method.getParameterTypes().length == 1 && method.getName().startsWith("set"); 
	}
	
}
