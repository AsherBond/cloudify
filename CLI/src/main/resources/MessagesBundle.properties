#in AbstractGSCommand, when some command throws an exception
op_failed = Operation failed. {0}

#when a user tries to invoke a command without connecting first
not_connected = Not Connected. A connection with the REST gateway must be established before executing this command (see help: connect --help)

#when a user types exit on the console
on_exit = Good Bye!

service_file_doesnt_exist= The service file or folder you have specified does not exist: {0}

#when performing install/pack on a folder that does'nt exist
folder_doesnt_exist = Folder {0} does not exist

#when validating a dsl file that does not exist
file_doesnt_exist = File {0} does not exist

#when a user tries to install a service without performing pack first
service_not_packed = Service {0} has not been packaged properly, please make sure your application is properly packaged

#after a successful service installation
service_install_ended = Service "{0}" successfully installed

#after a successful service installation
service_install_failed = Installation of service "{0}" failed

#after a successful pack command. the argument is the absolute path of the packed file.
packed_successfully = Application deployment packaged successfully into {0}

#application not found when trying to install
application_not_found = Could not find application {0}

#service not found when performing start/undeploy/addInstance/...
service_not_found = Could not find service {0}

#dsl validation is successful. The argument is the absolute file path
validated_successfully = Validated DSL file {0} successfully

#when connect command was successful
connected_successfully = Connected successfully

#when connect command was unsuccessful
connection_failed = Failed to connect to REST gateway
connection_failed_with_error = Failed to connect: {0}

#when disconnect command was successful
disconnected_successfully = Disconnected successfully

#when a service deployment was successful
deployed_successfully = Successfully deployed {0}

#when a service deployment was unsuccessful
deployment_failed = Deployment failed

#when a service undeployment was successful
undeployed_successfully = Successfully undeployed {0}

#when a service undeployment was unsuccessful
undeploy_failed = Failed to undeploy service {0}, error: {1} 

#when an addInstance command was successful
added_instance_successfully = Instance incremented successfully

#when an addInstance command was unsuccessful
add_instance_failed = Failed to add instance

#when a removeInstance command was successful
instance_removed_successfully = Successfully removed instance {0}

#when a removeInstance command was unsuccessful
instance_remove_failed = Failed to remove instance

#when calling removeInstance but num of instances is already 0
num_instances_zero = Number of instances is already 0

#when a restart command was successful
instance_restarted_successfully = Instance {0} of service {1} restarted successfully
multi_instance_restarted_successfully = Instances {0} of service {1} restarted successfully

#when an unknown rest response is returned from the rest server
illegal_rest_response= Illegal response received from REST gateway: {0}

#when the user type in an unknown service type
unknown_service_type = Unknown service type: {0}

#when the user types a malformed URL
could_not_parse_url = Illegal URL format: {0}

#when setting the application name
using_application = Using application {0}

#when trying to connect to an already connected server
already_connected = Already connected, to connect to another admin server call the disconnect command first

#when specifying a list of ids that cannot be parsed as integer array
id_array_illegal_format = Illegal format for list of IDs: {0}. You should specify by a comma separated list. e.g. 1,2,3

#when no instances for a certain service exist
no_instances_found = No instances found for service {0}

#When calling an unimplemented command
command_not_implemented = The {0} operation is not yet supported

#When failing to add an instance for a certain service
failed_to_add_instance = Failed to add instance for service {1} of application {0}

#When failing to find a processing unit after a service deployment
failed_to_locate_service_after_deployment = Failed to deploy service

#When failing to locate a specific service instance
service_instance_unavailable = Instance {2} of service {1} of application {0} could not be reached

#When failing to locate an application
failed_to_locate_app = Application {0} could not be found or has no services deployed

#When failing to locate a lus on the server side
failed_to_locate_lookup_service = Failed to locate a lookup service in the cloud endpoint with discovery groups:{0} and locators:{1} 

#When using admin api facade and lus is not available
failed_to_locate_lookup_service_admin_api_facade = Failed to locate a lookup service

#When failing to locate esm on the server side
failed_to_locate_esm = Failed to locate a cloud controller

#When failing to locate gsm on the server side
failed_to_locate_gsm = Failed to locate a cloud controller

#When specifying an unknown component type
unknown_component_type = Unknown component type specified: {0}

#On undeployment failure
failed_to_undeploy_service = Failed to undeploy service {0}

#Failed to deploy service
failed_to_deploy_service = Failed to deploy service {0}

#Communication Error
comm_error = Communication Error accessing {0}. Reason: {1}

updated_succesfully = Updating number of instances of service {0} to {1}

#when the user tries to connect using AdminApi
could_not_connect_to_localhost_using_admin = You are using a local Admin. The url argument must be left blank.

#When setting the admin as REST/LOCAL ADMIN API was successful 
adminSet_Successful = Admin set to {0} successfully

#When uninstalling service that doesn't exist
failed_to_locate_service = Failed to locate service {0}

application_installed_succesfully = Application {0} installed successfully

application_installation_failed = Application {0} could not be installed
application_uninstalled_succesfully = Application {0} uninstalled successfully

#When an operation times out
operation_timeout = Operation timed out: {0}

#When azure bootstrap completes succesfully
bootstrap_succesfully = Azure application bootstrap completed successfully

#When a test recipe finished to 
test_recipe_success = Recipe test completed

#When a test recipe fails with a non zero return value
test_recipe_failure = Recipe test failed with return code {0}. See log messages for more details.

#When a test recipe fails with a non zero return value
test_recipe_service_lifecycle_missing = Recipe service file does not contain a lifecycle closure. Recipe test failed.

not_jar_or_zip = File {0} is not a jar or zip file

#when starting the deployment
deploying_service = deploying {0} service

#while waiting for instances after deployment
deploying_service_updates = Planned service instances: {0}, Actual service instances: {1}

#before a long running operation starts
expected_execution_time = It is currently {0}.\nThe following operation is expected to take between 15-30 minutes.

# install application state messages
install_service_start = Installing service: {0}

application_file_format_mismatch = {0} is not a zip or jar file

number_of_instances_exceeded_planned = expected {0}, found {1}. Please contact your system administrator.

invocation_success = {0}: OK from {1}, Result: {2}

invocation_failed = {0}: FAILED from {1}, Error: {2}

CLI_unable_to_parse_to_JSON = Unable to process server response: {0} 

Remote_rest_gateway_exception = Error occurred on remote server: {0}

URL_not_found = The specified URL could not be resolved: {0}

#When User tries to uninstall a service that has been installed as a part of an application installation
cant_find_service_for_app = Can't find service "{0}" in application "{1}"

#When trying to deploy an application that is already deployed.
application_already_deployed = Application "{0}" is already deployed. Use "uninstall-application {0}" to uninstall the existing application, before installing the new application.


cloud_terminated_successfully = Cloud terminated successfully.


#Confirmation question for when uninstalling an application.
application_uninstall_confirmation = Are you sure you want to uninstall application: <{0}> [y/n]?

#Confirmation question for when uninstalling a service.
service_uninstall_confirmation = Are you sure you want to uninstall service: <{0}> [y/n]?

uninstall_aborted = The uninstall action was aborted


#When all invokes completed successfully.
all_invocations_completed_successfully = invocation completed successfully.

#When not all invocation succeeded.
not_all_invocations_completed_successfully = One or more command invocations on {0} failed: {1}.

########CLOUD BOOTSTRAP MESSAGES#########

# when starting bootstrap-cloud 'Provider'
bootstrapping_cloud = Bootstrapping provider {0}. This may take a few minutes. 

# before trying to connect to to the cloud API 
try_to_connect_to_cloud_api = Establishing connection with provider {0}. 

connection_to_cloud_api_succeeded = Established connection with provider {0}. 

connection_to_cloud_api_failed = Failed to connect to provider {0}.

attempting_to_create_management_vms = Attempting Cloudify Management VM provisioning.

failed_to_create_management_vm = Failed to create Cloudify Management VM: Error {0}.

management_started_successfully = Management started successfully.

attempting_to_access_vm_with_ssh = Attempting to access Management VM {0}.

access_vm_with_ssh_success = Established connection with Management VM {0}.

cloud_started_successfully = Successfully created Cloudify Manager on provider {0}. Use the "teardown-cloud {0}" command to terminate all machines.

failed_to_access_rest_before_teardown = Teardown failed. Failed to fetch the currently deployed applications list. For force teardown use the -force flag.

apps_deployed_before_teardown_localcloud = Teardown failed. There are still applications deployed:{0}. Use the '-force' flag to force shutdown the management components.

failed_to_uninstall_app_before_teardown = Teardown failed. Application {0} faild to uninstall.

all_apps_removed_before_teardown = All applications were successfully uninstalled. 

completed_localcloud_teardown = Completed local-cloud teardown
